# calculating orders and revenue per day using hivecontext
import org.apache.spark.sql.hive.HiveContext

val hiveCtx = new HiveContext(sc)
hiveCtx.sql("set spark.sql.shuffle.partitions=10");

hiveCtx.sql("select o.order_date, round(sum(oi.order_item_subtotal),2), count(distinct oi.order_item_order_id) from orders o join order_items oi on o.order_id= oi.order_item_order_id group by o.order_date order by o.order_date").collect().foreach(println)

------------------------------------------------------------------------------------------------------------------------------------------------------------
# calculating orders and revenue per day using SQLContext

import org.apache.spark.sql.SQLContext
import org.apache.spark.sql.Row

val sqlCtx = new SQLContext(sc)
sqlCtx.sql("set spark.sql.shuffle.partitions=10")
val orders = sc.textFile("/user/cloudera/sqoop_import/orders")
val orderItems = sc.textFile("/user/cloudera/sqoop_import/order_items")

val ordersRDD=orders.map(o => o.split(","))
val orderItemsRDD=orderItems.map(o => o.split(","))

case class Orders(order_id : Int, order_date : String)
case class OrderItems(order_item_id : Int, order_item_order_id : Int , order_product : Int, ord_quant: Int, order_item_subtotal:Float)

#number , datatype and sequence of arguments mapped should match with the class definition
val orders = ordersRDD.map( o => Orders(o(0).toInt, o(1) )).toDF()
val orderItems = orderItemsRDD.map( o => OrderItems(o(0).toInt, o(1).toInt, o(2).toInt,o(3).toInt, o(4).toFloat )).toDF()

# import createSchemaRDD to use registerTempTable
import sqlCtx.implicits._

#here tables are getting registered to the default sqlContext provided by the REPL, that is the reason I am running the sql query on that context
orders.registerTempTable("orders")
orderItems.registerTempTable("order_items")

sqlContext.sql("select o.order_date, round(sum(oi.order_item_subtotal),2), count(distinct oi.order_item_order_id) from orders o join order_items oi on o.order_id= oi.order_item_order_id group by o.order_date order by o.order_date").collect().foreach(println)







