# finding the cancelled orders whose value is greater than 1000  

val orders = sc.textFile("/user/cloudera/sqoop_import/orders")
val orderItems = sc.textFile("/user/cloudera/sqoop_import/order_items")


val canceledOrdersRDD = orders.map(x => ((x.split(",")(0)), x.split(",")(3))).filter(_._2.equals("CANCELED"))
val orderItemsRDD = orderItems.map(x => ((x.split(",")(1)), (x.split(",")(4)).toFloat))

val OrderItemsJoinCanceledOrders = orderItemsRDD.join(canceledOrdersRDD)

val OrderItemsJoinCanceledOrdersMap = OrderItemsJoinCanceledOrders.map(x => (x._1, x._2._1)).reduceByKey((x,y) => x + y)


val canceledOrdersRevenueGreaterThan1000 = OrderItemsJoinCanceledOrdersMap.filter( line => line._2 > 1000)

----------------------------------------------------------------------------------------------------------------
# doing the above computation using hive

import org.apache.spark.sql.hive.HiveContext
val hiveCtx = new HiveContext(sc)
hiveCtx.sql("set spark.sql.shuffle.partitions = 15")

val rdd = hiveCtx.sql("select * from (select o.order_id , sum(oi.order_item_subtotal) as order_item_revenue from orders o join order_items oi on o.order_id = oi.order_item_order_id where o.order_status = 'CANCELED' group by o.order_id) q where order_item_revenue > 1000")
